# Importok v√©grehajt√°sa
import math
import os
from datetime import datetime
from typing import List, Tuple

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text

PI = math.pi
console = Console()


# Alapvet≈ë matematikai m≈±veletek
def osszeadas(a, b):
    """K√©t sz√°m √∂sszead√°sa"""
    return a + b


def kivonas(a, b):
    """K√©t sz√°m kivon√°sa"""
    return a - b


def szorzas(a, b):
    """K√©t sz√°m szorz√°sa"""
    return a * b


def osztas(a, b):
    """K√©t sz√°m oszt√°sa"""
    if b == 0:
        raise ZeroDivisionError("Null√°val val√≥ oszt√°s nem lehets√©ges.")
    return a / b


def hatvanyozas(a, b):
    """K√©t sz√°m hatv√°nyoz√°sa"""
    return a**b


def kor_terulet(r):
    """K√∂r ter√ºlet√©nek kisz√°m√≠t√°sa"""
    return PI * r * r


def kor_kerulet(r):
    """K√∂r ker√ºlet√©nek kisz√°m√≠t√°sa"""
    return 2 * r * PI


# √öj halad√≥ matematikai m≈±veletek
def gyok(a):
    """N√©gyzetgy√∂k kisz√°m√≠t√°sa"""
    if a < 0:
        raise ValueError("Negat√≠v sz√°m gy√∂k√©t nem lehet kisz√°m√≠tani.")
    return math.sqrt(a)


def sin(a):
    """Szinusz kisz√°m√≠t√°sa (radi√°nban)"""
    return math.sin(a)


def cos(a):
    """Koszinusz kisz√°m√≠t√°sa (radi√°nban)"""
    return math.cos(a)


def tan(a):
    """Tangens kisz√°m√≠t√°sa (radi√°nban)"""
    return math.tan(a)


def log(a):
    """Term√©szetes logaritmus kisz√°m√≠t√°sa"""
    if a <= 0:
        raise ValueError("Logaritmus csak pozit√≠v sz√°mokra √©rtelmezhet≈ë.")
    return math.log(a)


def log10(a):
    """10-es alap√∫ logaritmus kisz√°m√≠t√°sa"""
    if a <= 0:
        raise ValueError("Logaritmus csak pozit√≠v sz√°mokra √©rtelmezhet≈ë.")
    return math.log10(a)


# Mem√≥ria √©s el≈ëzm√©ny kezel√©s
class CalculatorMemory:
    """Sz√°mol√≥g√©p mem√≥ria √©s el≈ëzm√©nyek kezel√©se"""

    def __init__(self):
        self.memory = 0.0
        self.history: List[Tuple[str, float, str]] = []

    def memory_add(self, value: float):
        """√ârt√©k hozz√°ad√°sa a mem√≥ri√°hoz (M+)"""
        self.memory += value

    def memory_subtract(self, value: float):
        """√ârt√©k kivon√°sa a mem√≥ri√°b√≥l (M-)"""
        self.memory -= value

    def memory_recall(self) -> float:
        """Mem√≥ria visszah√≠v√°sa (MR)"""
        return self.memory

    def memory_clear(self):
        """Mem√≥ria t√∂rl√©se (MC)"""
        self.memory = 0.0

    def add_history(self, operation: str, result: float, timestamp: str = None):
        """M≈±velet hozz√°ad√°sa az el≈ëzm√©nyekhez"""
        if timestamp is None:
            timestamp = datetime.now().strftime("%H:%M:%S")
        self.history.append((operation, result, timestamp))

    def get_history(self) -> List[Tuple[str, float, str]]:
        """El≈ëzm√©nyek lek√©r√©se"""
        return self.history

    def clear_history(self):
        """El≈ëzm√©nyek t√∂rl√©se"""
        self.history = []


# Glob√°lis mem√≥ria p√©ld√°ny
calc_memory = CalculatorMemory()


# K√©perny≈ë t√∂rl√©se
def clear_screen():
    """K√©perny≈ë t√∂rl√©se"""
    os.system("clear" if os.name != "nt" else "cls")


# Sz√°m bek√©r√©se valid√°l√°ssal
def beolvas_szam(prompt: str) -> float:
    """Egy sz√°m bek√©r√©se valid√°l√°ssal"""
    while True:
        try:
            value = input(prompt)
            return float(value)
        except ValueError:
            console.print("[bold red]Hib√°s bemenet! K√©rlek sz√°mot adj meg.[/bold red]")


# K√©t sz√°m bek√©r√©se
def beolvas_szamok():
    a = beolvas_szam("K√©rem az els≈ë sz√°mot (pontot haszn√°lj tizedesjegyk√©nt!): ")
    b = beolvas_szam("K√©rem a m√°sodik sz√°mot (pontot haszn√°lj tizedesjegyk√©nt!): ")
    return a, b


# TUI megjelen√≠t√©s
def megjelenit_fejlec():
    """Fejl√©c megjelen√≠t√©se rich st√≠lussal"""
    fejlec = Panel(
        Text("üßÆ TOV√ÅBBFEJLESZTETT SZ√ÅMOL√ìG√âP üßÆ", justify="center", style="bold cyan"),
        style="bold blue",
    )
    console.print(fejlec)


def megjelenit_menu():
    """Men√º megjelen√≠t√©se t√°bl√°zatban"""
    table = Table(
        title="üìã M≈±veletek Men√º", show_header=True, header_style="bold magenta"
    )
    table.add_column("Sz√°m", style="cyan", width=6)
    table.add_column("M≈±velet", style="green")
    table.add_column("Sz√°m", style="cyan", width=6)
    table.add_column("M≈±velet", style="green")

    table.add_row("1", "‚ûï √ñsszead√°s", "11", "üìê Szinusz")
    table.add_row("2", "‚ûñ Kivon√°s", "12", "üìê Koszinusz")
    table.add_row("3", "‚úñÔ∏è Szorz√°s", "13", "üìê Tangens")
    table.add_row("4", "‚ûó Oszt√°s", "14", "üìä Logaritmus (ln)")
    table.add_row("5", "üî¢ Hatv√°nyoz√°s", "15", "üìä Logaritmus (log10)")
    table.add_row("6", "üîµ K√∂r ter√ºlete", "M+", "üíæ Mem√≥ri√°ba ad")
    table.add_row("7", "‚≠ï K√∂r ker√ºlete", "M-", "üíæ Mem√≥ri√°b√≥l kivon")
    table.add_row("8", "‚àö N√©gyzetgy√∂k", "MR", "üíæ Mem√≥ria visszah√≠v√°s")
    table.add_row("9", "üìú El≈ëzm√©nyek", "MC", "üíæ Mem√≥ria t√∂rl√©s")
    table.add_row("10", "üóëÔ∏è El≈ëzm√©nyek t√∂rl√©se", "H", "‚ùì S√∫g√≥")
    table.add_row("0", "‚ùå Kil√©p√©s", "", "")

    console.print(table)


def megjelenit_elozmenyeket():
    """El≈ëzm√©nyek megjelen√≠t√©se"""
    history = calc_memory.get_history()
    if not history:
        console.print("[yellow]Nincs m√©g m≈±velet az el≈ëzm√©nyekben.[/yellow]")
        return

    table = Table(
        title="üìú Sz√°m√≠t√°si El≈ëzm√©nyek", show_header=True, header_style="bold cyan"
    )
    table.add_column("Id≈ë", style="dim", width=10)
    table.add_column("M≈±velet", style="white")
    table.add_column("Eredm√©ny", style="green", justify="right")

    for op, result, time in history[-10:]:  # Csak az utols√≥ 10
        table.add_row(time, op, f"{result:.6g}")

    console.print(table)


def megjelenit_memoria():
    """Mem√≥ria √°llapot megjelen√≠t√©se"""
    mem_value = calc_memory.memory_recall()
    if mem_value != 0:
        console.print(f"[bold yellow]üíæ Mem√≥ria: {mem_value:.6g}[/bold yellow]")


def megjelenit_sugo():
    """S√∫g√≥ megjelen√≠t√©se"""
    sugo_text = """
[bold cyan]Haszn√°lati √∫tmutat√≥:[/bold cyan]

[bold green]Alapm≈±veletek:[/bold green]
  ‚Ä¢ 1-7: K√©t sz√°m k√∂z√∂tti m≈±veletek
  ‚Ä¢ 8: N√©gyzetgy√∂k (egy sz√°m)
  ‚Ä¢ 11-15: Trigonometrikus √©s logaritmikus m≈±veletek (egy sz√°m)

[bold green]Mem√≥ria m≈±veletek:[/bold green]
  ‚Ä¢ M+: Utols√≥ eredm√©ny hozz√°ad√°sa a mem√≥ri√°hoz
  ‚Ä¢ M-: Utols√≥ eredm√©ny kivon√°sa a mem√≥ri√°b√≥l
  ‚Ä¢ MR: Mem√≥ria √©rt√©k√©nek megjelen√≠t√©se
  ‚Ä¢ MC: Mem√≥ria t√∂rl√©se

[bold green]Egy√©b funkci√≥k:[/bold green]
  ‚Ä¢ 9: El≈ëzm√©nyek megtekint√©se
  ‚Ä¢ 10: El≈ëzm√©nyek t√∂rl√©se
  ‚Ä¢ H: Ez a s√∫g√≥
  ‚Ä¢ 0: Kil√©p√©s a programb√≥l

[bold yellow]Tippek:[/bold yellow]
  ‚Ä¢ Trigonometrikus f√ºggv√©nyek radi√°nban dolgoznak
  ‚Ä¢ Az eredm√©nyek automatikusan az el≈ëzm√©nyekbe ker√ºlnek
  ‚Ä¢ A mem√≥ria funkci√≥k az utols√≥ eredm√©nnyel dolgoznak
    """
    panel = Panel(sugo_text, title="‚ùì S√∫g√≥", border_style="blue")
    console.print(panel)


def utasitasok():
    """Utas√≠t√°sok megjelen√≠t√©se (r√©gi kompatibilit√°s)"""
    megjelenit_menu()


def main():
    """F≈ëprogram tov√°bbfejlesztett TUI-vel"""
    utolso_eredmeny = None

    while True:
        clear_screen()
        megjelenit_fejlec()
        megjelenit_memoria()
        megjelenit_menu()

        valasztas = input("\nüî¢ V√°lassz m≈±veletet: ").strip().upper()

        if valasztas == "0":
            console.print(
                "[bold green]üëã Viszl√°t! K√∂sz√∂n√∂m a haszn√°latot![/bold green]"
            )
            break

        elif valasztas == "9":
            clear_screen()
            megjelenit_fejlec()
            megjelenit_elozmenyeket()
            input("\n‚èé Nyomj Enter-t a folytat√°shoz...")
            continue

        elif valasztas == "10":
            calc_memory.clear_history()
            console.print("[bold green]‚úì El≈ëzm√©nyek t√∂r√∂lve![/bold green]")
            input("\n‚èé Nyomj Enter-t a folytat√°shoz...")
            continue

        elif valasztas == "H":
            clear_screen()
            megjelenit_fejlec()
            megjelenit_sugo()
            input("\n‚èé Nyomj Enter-t a folytat√°shoz...")
            continue

        elif valasztas == "M+":
            if utolso_eredmeny is not None:
                calc_memory.memory_add(utolso_eredmeny)
                uj_ertek = calc_memory.memory_recall()
                console.print(
                    f"[bold green]‚úì {utolso_eredmeny:.6g} hozz√°adva a mem√≥ri√°hoz! "
                    f"√öj √©rt√©k: {uj_ertek:.6g}[/bold green]"
                )
            else:
                console.print(
                    "[bold red]Nincs m√©g eredm√©ny a mem√≥ri√°hoz ad√°shoz![/bold red]"
                )
            input("\n‚èé Nyomj Enter-t a folytat√°shoz...")
            continue

        elif valasztas == "M-":
            if utolso_eredmeny is not None:
                calc_memory.memory_subtract(utolso_eredmeny)
                uj_ertek = calc_memory.memory_recall()
                console.print(
                    f"[bold green]‚úì {utolso_eredmeny:.6g} kivonva a mem√≥ri√°b√≥l! "
                    f"√öj √©rt√©k: {uj_ertek:.6g}[/bold green]"
                )
            else:
                console.print(
                    "[bold red]Nincs m√©g eredm√©ny a mem√≥ri√°b√≥l kivon√°shoz![/bold red]"
                )
            input("\n‚èé Nyomj Enter-t a folytat√°shoz...")
            continue

        elif valasztas == "MR":
            mem_val = calc_memory.memory_recall()
            console.print(
                f"[bold yellow]üíæ Mem√≥ria √©rt√©ke: {mem_val:.6g}[/bold yellow]"
            )
            input("\n‚èé Nyomj Enter-t a folytat√°shoz...")
            continue

        elif valasztas == "MC":
            calc_memory.memory_clear()
            console.print("[bold green]‚úì Mem√≥ria t√∂r√∂lve![/bold green]")
            input("\n‚èé Nyomj Enter-t a folytat√°shoz...")
            continue

        # M≈±veletek v√©grehajt√°sa
        try:
            if valasztas in ["1", "2", "3", "4", "5"]:
                console.print("\n[cyan]K√©t sz√°m bek√©r√©se:[/cyan]")
                a, b = beolvas_szamok()

                if valasztas == "1":
                    eredmeny = osszeadas(a, b)
                    muvelet = f"{a:.6g} + {b:.6g}"
                elif valasztas == "2":
                    eredmeny = kivonas(a, b)
                    muvelet = f"{a:.6g} - {b:.6g}"
                elif valasztas == "3":
                    eredmeny = szorzas(a, b)
                    muvelet = f"{a:.6g} √ó {b:.6g}"
                elif valasztas == "4":
                    eredmeny = osztas(a, b)
                    muvelet = f"{a:.6g} √∑ {b:.6g}"
                elif valasztas == "5":
                    eredmeny = hatvanyozas(a, b)
                    muvelet = f"{a:.6g} ^ {b:.6g}"

            elif valasztas in ["6", "7", "8", "11", "12", "13", "14", "15"]:
                console.print("\n[cyan]Egy sz√°m bek√©r√©se:[/cyan]")
                a = beolvas_szam("K√©rem a sz√°mot: ")

                if valasztas == "6":
                    eredmeny = kor_terulet(a)
                    muvelet = f"K√∂r ter√ºlete (r={a:.6g})"
                elif valasztas == "7":
                    eredmeny = kor_kerulet(a)
                    muvelet = f"K√∂r ker√ºlete (r={a:.6g})"
                elif valasztas == "8":
                    eredmeny = gyok(a)
                    muvelet = f"‚àö{a:.6g}"
                elif valasztas == "11":
                    eredmeny = sin(a)
                    muvelet = f"sin({a:.6g})"
                elif valasztas == "12":
                    eredmeny = cos(a)
                    muvelet = f"cos({a:.6g})"
                elif valasztas == "13":
                    eredmeny = tan(a)
                    muvelet = f"tan({a:.6g})"
                elif valasztas == "14":
                    eredmeny = log(a)
                    muvelet = f"ln({a:.6g})"
                elif valasztas == "15":
                    eredmeny = log10(a)
                    muvelet = f"log10({a:.6g})"

            else:
                console.print("[bold red]‚ùå √ârv√©nytelen v√°laszt√°s![/bold red]")
                input("\n‚èé Nyomj Enter-t a folytat√°shoz...")
                continue

            # Eredm√©ny megjelen√≠t√©se
            utolso_eredmeny = eredmeny
            calc_memory.add_history(muvelet, eredmeny)

            eredmeny_panel = Panel(
                f"[bold green]{muvelet} = {eredmeny:.10g}[/bold green]",
                title="‚ú® Eredm√©ny",
                border_style="green",
            )
            console.print("\n")
            console.print(eredmeny_panel)

        except (ZeroDivisionError, ValueError) as e:
            console.print(f"[bold red]‚ùå Hiba: {e}[/bold red]")

        except Exception as e:
            console.print(f"[bold red]‚ùå V√°ratlan hiba: {e}[/bold red]")

        input("\n‚èé Nyomj Enter-t a folytat√°shoz...")


if __name__ == "__main__":
    main()
